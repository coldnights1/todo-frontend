/* Scope styles to the add-task row only */
.task-form {
  width: 100%;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 1rem;

  /* visual container */
  padding: 12px;
  background: #f7f9fc;
  border-radius: 10px;
  box-shadow: 0 3px 8px rgba(0,0,0,0.08);

  /* keep content inside on small widths */
  flex-wrap: wrap;
}

/* Inputs grow but can shrink and wrap */
.task-form input,
.task-form select {
  flex: 1 1 180px;         /* grow + shrink; min ~180px */
  min-width: 0;            /* allow flexbox to shrink below content width */
  padding: 0.5rem 0.8rem;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 0.95rem;
}

/* Button stays compact and never forces overflow */
.task-form button {
  flex: 0 0 auto;          /* fixed width, no stretching */
  padding: 0.55rem 1.2rem;
  background: #1976d2;
  border: none;
  border-radius: 6px;
  color: #fff;
  font-size: 0.95rem;
  font-weight: 600;
  cursor: pointer;
  transition: background 0.2s;
}
.task-form button:hover { background: #1565c0; }

/* Remove broad element rules â€” they were causing overflow.
   If you still want generic input/button styles, scope them under .task-form only. */

/* Optional: stack nicely on very small screens */
@media (max-width: 640px) {
  .task-form button {
    width: 100%;
  }
}
